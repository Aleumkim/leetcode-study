Using repeated value, for every 2^k, k = 0, 1,... n
class Solution {
    public int[] countBits(int n) {
        int[] result = new int[n+1];
        int indexForRepeatingValue = 1;
        int leftMostBit = 1;

        for (int i = 1; i <= n; i++){
            if (i == leftMostBit) {
                result[i] = 1;
                leftMostBit <<= 1;
                indexForRepeatingValue = 1;
            }
            else {
                result[i] = result[indexForRepeatingValue] + 1;
                indexForRepeatingValue++;
            }

        }

        return result;
    }
}



Brute force
class Solution {
    public int[] countBits(int n) {
        int[] res = new int[n+1];
        for (int i = 0; i < n+1; i++) {
            res.add(countIntBits(i));
        }
        return res;
    }

     private int countIntBits(int n) {
        if (n == 0)
            return 0;
        else
            return 1 + countIntBits(n & (n - 1));
    }
}