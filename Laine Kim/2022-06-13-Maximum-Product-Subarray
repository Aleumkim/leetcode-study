1st - tried the similar way to the maximum sum subarray
- given input was passed, but [2,3,-2,4,-6], trying this one failed.

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int maxProduct = nums[0];
        int currProduct = nums[0];

        for (int i = 1; i < n; i++) {
            currProduct *= nums[i];

            if (nums[i] > currProduct){
                currProduct = nums[i];
            }

            maxProduct = Math.max(currProduct, maxProduct);
        }
        return maxProduct;
    }
}


2nd - realized no need to evaluate  if (nums[i] > currProduct) condition because the product can be larger later depending on the sign.
So keep the whole sum to keep the absolute value, anyway the maxSum is evaluated and stored at the each iteration.

class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = nums[0];
        int currProduct = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currProduct *= nums[i];
            maxProduct = Math.max(currProduct, maxProduct);
        }
        return maxProduct;
    }
}
