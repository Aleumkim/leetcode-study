1st try

# store the starting index and the sum so far, Hashmap (x), two integer.
- if the sum + current element is smaller than the current element,
change the starting index to the current one, and the sum as the current element
- otherwise, keep the initial starting index and add the current element to the sum

edge case
- one element. -> just return the sum after the loop. no need to another check

- no need to starting index?

class Solution {
    public int maxSubArray(int[] nums) {
       int startingIndex = 0;
       int maxSum = 0;
       int currentSum = 0;
       for (int i = 0; i < nums.length; i++) {
           currentSum = maxSum + nums[i];
           if (currentSum <= nums[i]) {
               maxSum = nums[i];
               startingIndex = i;
           } else {
               maxSum = currentSum;
           }
       }
       return maxSum;
    }
}

--> Wrong answer

2nd try
[-2,1,-3,4,-1,2,1,-5,4]
Add another integer variable nextSum to calculate the sum with next element  as well.
it should stop at 1, but went to far to -5, 4. it didn't stop at 1, maxSum with 6. The current sum at nums[8] = 1. the next sum = 5.
The maxSum >= nextSum so should've stopped there.

Accepted solution
class Solution {
    public int maxSubArray(int[] nums) {
       int maxSum = 0;
       int currentSum = 0;
       int nextSum = 0;
       for (int i = 0; i < nums.length; i++) {
           currentSum = maxSum + nums[i];
           if (i+1 < nums.length) {
               nextSum = currentSum + nums[i+1];
           }
           if (currentSum <= nums[i]) {
               maxSum = nums[i];
           } else {
               if (i+1 < nums.length) {
                   if (maxSum >= nextSum){
                       return currentSum;
                     // return maxSum; //this was the problem that made it fail, should return currentSum here.
                  } else {
                       maxSum = currentSum;
                  }
               }
           }
       }
       return maxSum;
    }
}

3rd improvement - reduce variable and clean up repeated if condition. still too many if/else
class Solution {
    public int maxSubArray(int[] nums) {
       int maxSum = 0;
       int currentSum = 0;

       for (int i = 0; i < nums.length; i++) {
           currentSum = maxSum + nums[i];
           if (currentSum <= nums[i]) { // when the current element is larger than the maintained sum so far
               maxSum = nums[i];        // start from the current element as maxSum
           } else {                     // otherwise
               if (i+1 < nums.length) {      // if there's next element
                   if (nums[i+1] < 0){       // if adding the next one reduces the sum,
                       return currentSum;    // stops here
                  } else {
                       maxSum = currentSum;   // otherwise set the maxSum as current
                  }
               }
           }
       }
       return maxSum;
    }
}

4th improvement - try to reduce if/else nest and refactor two if conditions to private function
class Solution {
    public int maxSubArray(int[] nums) {
       int n = nums.length;
       int maxSum = 0;
       int currentSum = 0;

       for (int i = 0; i < n; i++) {
           currentSum = maxSum + nums[i];

           if (currentSum <= nums[i]) { // when the current element is larger than the maintained sum so far
               maxSum = nums[i];        // start from the current element as maxSum
           } else {                                   // otherwise, when adding current elemet is beneficial
               maxSum = currentSum;                   // add the currentElem to the maxSum
               if (!shouldAddNextElem(i, nums)) {        // and check the next element ahead
                  break;
               }
           }
       }
       return maxSum;
    }

    private boolean shouldAddNextElem(int index, int[] nums) {
        if (index + 1 < nums.length){
           return nums[index + 1] >= 0;
        }
        return false;
    }
}


-- Simple solution found on discussion. No need to check the next elem ahead - use Max function!!
class Solution {
     public int maxSubArray(int[] nums) {
        int max = nums[0];
        int currentMax = nums[0];
        for(int i=1; i<nums.length; i++) {
            currentMax = currentMax + nums[i];
            if (currentMax < nums[i]) {
                currentMax = nums[i];
            }
            max = Math.max(currentMax, max);
        }
        return max;
    }
}